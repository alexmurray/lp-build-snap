#! /usr/bin/python

import os
import sys
import argparse

from launchpadlib.launchpad import Launchpad

DEBUG=False

# basic paths
home = os.getenv("HOME")
workdir = home+"/snap-builds"

parser = argparse.ArgumentParser(description='Trigger a Snap build in Launchpad')
parser.add_argument("--lpname", dest="lpname", default=os.getenv("USER"), help="Launchpad user or team to build from (default: %s)"%os.getenv("USER"))
parser.add_argument("--arch", dest="arch", default="amd64", help="Build architecture to target (default: amd64)")
parser.add_argument("--series", dest="series", default="xenial", help="Ubuntu release to build against (default: xenial)")
parser.add_argument("snap_name", help="Name of the Snap package being built")
args = parser.parse_args()


# basic data
people_name = args.lpname
snap_name = args.snap_name
buildarch = args.arch
series = args.series

# we need to store credentials once for cronned builds
cachedir = workdir+"/cache"
creds = workdir+"/credentials"

if DEBUG:
    print ("people_name: %s" % people_name)
    print ("snap_name: %s" % snap_name)
    print ("buildarch: %s" % buildarch)
    print ("series: %s" % series)
    print ("cachedir: %s" % cachedir)
    print ("creds: %s" % creds)

# log in
launchpad = Launchpad.login_with('Launchpad Snap Build Trigger',
                                 'production', cachedir,
                                 credentials_file=creds,
                                 version='devel')

# get launchpad team data and ppa
snappydev = launchpad.people[people_name]
#imageppa = snappydev.getPPAByName(name='image')
ubuntu = launchpad.distributions["ubuntu"]


# get snap
ubuntucore = launchpad.snaps.getByName(name=snap_name,
                                       owner=snappydev)

# get distro info
ubuntu = launchpad.distributions['ubuntu']
release = ubuntu.getSeries(name_or_version=series)

# trigger build
arch = release.getDistroArchSeries(archtag=buildarch)
request = ubuntucore.requestBuild(archive=ubuntu.main_archive,
                                  distro_arch_series=arch,
                                  pocket='Updates')
buildid = str(request).rsplit('/', 1)[-1]
print("Arch: {} is building under: {}".format(buildarch,
                                                  request))
